import warnings
import math

import torch
from torch import nn

from monai.networks.nets.vit import ViT
from nnunet.network_architecture.neural_network import SegmentationNetwork


def _trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    NOTE: this impl is similar to the PyTorch trunc_normal_, the bounds [a, b] are
    applied while sampling the normal with mean/std applied, therefore a, b args
    should be adjusted to match the range of mean, std args.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    with torch.no_grad():
        return _trunc_normal_(tensor, mean, std, a, b)


class ViTForSimMIM(ViT):
    """
    ViTForSimMIM based on: "Xie et al.,
    SimMIM: A Simple Framework for Masked Image Modeling"
    """
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        hidden_size = kwargs['hidden_size']

        self.mask_token = nn.Parameter(torch.zeros(1, 1, hidden_size))
        self._trunc_normal_(self.mask_token, std=.02)

    def _trunc_normal_(self, tensor, mean=0., std=1.):
        trunc_normal_(tensor, mean=mean, std=std, a=-std, b=std)

    def forward(self, x, mask):
        pe = self.patch_embedding
        x = pe.patch_embeddings(x)
        
        if pe.pos_embed == "conv":
            x = x.flatten(2).transpose(-1, -2)
        B, L, _ = x.shape

        mask_token = self.mask_token.expand(B, L, -1)
        w = mask.flatten(1).unsqueeze(-1).type_as(mask_token)
        x = x * (1 - w) + mask_token * w
        
        if pe.position_embeddings is not None:
            x = x + pe.position_embeddings
        x = pe.dropout(x)

        hidden_states_out = []
        for blk in self.blocks:
            x = blk(x)
            hidden_states_out.append(x)
        x = self.norm(x)
        
        return x, hidden_states_out


class SimMIM(SegmentationNetwork):
    """
    SimMIM based on: "Xie et al.,
    SimMIM: A Simple Framework for Masked Image Modeling"
    """
    def __init__(self, img_size, in_channels=1, embed_dim=768):
        super().__init__()
        spatial_dims = len(img_size)
        if spatial_dims == 2:
            patch_size = (16, 16)
            conv_op = nn.Conv2d
        elif spatial_dims == 3:
            patch_size = (16, 16, 16)
            conv_op = nn.Conv3d
        else:
            raise ValueError(f"Invalid image size: {img_size}")
        self.vit = ViTForSimMIM(
            in_channels=in_channels,
            img_size=img_size,
            patch_size=patch_size,
            hidden_size=embed_dim,
            spatial_dims=spatial_dims,
            classification=False,
        )
        self.conv_op = conv_op
        self.num_classes = in_channels
        self.encoder_stride = 16

        self.decoder = nn.Sequential(
            nn.Conv2d(
                in_channels=embed_dim,
                out_channels=self.encoder_stride ** spatial_dims * in_channels, kernel_size=1),
            nn.PixelShuffle(self.encoder_stride),
        )

    def forward(self, x, mask):
        z, _ = self.vit(x, mask)
        x_rec = self.decoder(z)
        return x_rec
